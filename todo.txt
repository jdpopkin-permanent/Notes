TODO

Need comments on Notes. Need Votes (on songs, notes, and comments of all kinds).
Need sessions controller etc.

Note: if we're going to have a BFS for collaborations, we need to have
complicated relations between songs and artists (a link table).

Ask how partial Backbone works: you only have one application.js, so how can you
have meaningfully different javascript behavior on different pages of your site?
Maybe it's trivial but thus far our Backbone stuff have mostly involved a single
HTML page with Backbone doing everything.

Backbone with multiple routers? Do we simply initialize a different router on
each page?

Should the root use Backbone? Currently it only needs to show and hide the login
form.

Would it be possible to have a dropdown list of artists load dynamically as you type?

We should be able to deep link to particular albums, artists, and songs, so that
stuff should NOT be done via Backbone.

http://jquery.10927.n7.nabble.com/jQuery-specific-selected-highlighted-text-td87729.html

Insert a span with an "exegize_button" id immediately after the selection. Give
it absolute positioning.

Short term stuff: Add some capacity to edit and update song, artist, and album
pages.

Add notes. Dynamically get the y coordinate of the bottom of the selection area.
X coordinate will not be dynamic - set a manual width for the div containing the
lyrics, and set the X coordinate of the note object to be 30px to the right of
that or whatever.

To get the offset correct, you need to calculate the total length of all notes on
the current song which start earlier in the song. This would need to be updated upon
note deletion. Or perhaps instead: the offset from the end of the previous note?
Solution may involve use of nextSibling and previousSibling in the anchorNode.

YES use previousSibling over and over until you get to null. add data.length for each.

On load: sort notes by start_index. Add them one at a time starting at the back.
Make them invisible and display them on click.

To calculate the offset needed by a new link, create a div stretching from the start
of the <p> to the spot right before the start of the selection (use cloneNode()).
The offset will be the difference between the innerHTML.length and the
innerText.length of this div.

Or: JQuery to find start of <p>, then call $p.html(), then slice from 0 to start
of selection (index of highlight).

Awesome hack to strip html tags from selection (or get html from selection):
http://jsfiddle.net/dKaJ3/2/

Farm note display out into a template. Within the template, call another
template which adds comments. These will be added recursively; see the Reddit
clone for details. Issues: do we need authenticity token in the add-comment form?
Do we need to set up polymorphic associations on comments to make comments on both
songs and notes? Polymorphic name: commentable. Eww

The heroku problem was that someone had used heroku login previously, leading
the computer's "heroku apps" output to be different from my actual list of apps.
Now: seed db?

Vote buttons: should we have a separate vote form for each of these votes? They will
hold hidden fields and only display the button.

Issue: detecting that a user has already voted. The biggest problem is that we can't
easily avoid multiple queries for this with bootstrapping. We don't want to load
all votes on the page (potentially a lot of data, and almost all of it is irrelevant). Or do we?
We need to derive each element's score anyway. Alternatively, give every votable element
on the page (comments, notes, etc) a parent_song_id property. That way we can query
all children of a given song upon loading a page, and we can add an additional filter
related to the user so as to load the full set of votes by our user which are relevant
to this particular page.

Split the votes found via activerecord into separate parts. for each of these parts,
associate them with the json... no. One big jsonified array. Loop through it for each
element and filter by both votable_type and votable_id. This adds time quadratic
to the number of votable elements on the page (in the worst case).

.methods to include outcome of method call in json object. Use .as_json(methods: :vote_total).

Next: do this for notes. Then restrict a user's ability to vote more than once on something.

Second vote: add a hidden input in the form related to the question of whether
or not the user has already voted on this one that will inform our ajax callback
to alter the way it changes the score to be displayed. Calculate whether or not
this is the case BEFORE THE TEMPLATE IS EVEN CALLED - BOOTSTRAP IT LOL - and
feed extentVote of -1, 0, or 1 to the template based on extent vote.

All forms must clear on submit.

Now what? Figure out recent scores? ADD ALL VALIDATIONS.

Add users. Gameify by tallying users' upvotes.

Expand the infobox at the top of the song page to include artist and album info.

Issue: the site doesn't really work without Javascript. Problem: if using Backbone,
you need different urls (ones that include #) in order to have your routers take
effective action. These URLs will not work as normal links.

Get top n for: users.

Important stuff to do soon: featured users? Recent content? Most pressingly, seeds.rb.

Better infobox on song page.
Non-useless index pages for artists, albums, and songs.

You also have show pages for albums and artists which are currently totally useless.
Fix that.

Add a validation or something that ensures that albums specified upon song creation
match the artist chosen. http://www.htmlgoodies.com/tutorials/forms/article.php/3882051

Don't let users vote on their own content.

HEY - you can use Coalesce (SUM(votes.value), 0) to make null values appear as 0.

Stop ranking users based on the scores of the songs they post. Makes no sense.

Make show pages that aren't bad. Are these show pages going to be ordered by score?
If so, how can we preload scores?

Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.
Better seeds. Better layout.

Pagination of index pages?

Remaining issues: seed data, css. Maybe improved search.

Todo: fix comment counts on song and note?

Layout plans: logo on left. Navbar on same line (use clearfix.) Just imitate RG
and have the search bar next to the logo-link. Links in a ul on the right side.

Comment section: display block on that textarea and button. See what RG does.
Currently overflowing in notes. (Yes - all 3 are on different lines.) Make the
textarea big.

Draw hidden comment/vote sections and make them appear upon login? nahhhhhhh

Make new buttons. Put the lyrics in a box.
Do something less plain for artist and album pages. Use RG as a model.
Add featured users and float recent content right on root page.
Add links to recent content.

PAD EVERYTHING CIRCA 20PX TO BE LIKE THE SONGS PAGE.
Add user pages. <---- this next
Fix recent content
Kaminari and infinite scroll for the songs list, artist list, albums list?

stupid whitespace tricks http://css-tricks.com/almanac/properties/w/whitespace/

Change the carriage return removal function - make it a custom callback
(before_validation)? Or something?

Testable stuff: carriage return elimination for Song. All associations?
Which class methods can be tested? Maybe the score methods for comment and note.
Pagination? More consistent indentation - cf songs - 20px on the left side?

Testing for song: before_validation :remove_crs, score, recent_score, as_json

Testing for album: Rewrite #score and #recent_score for consistency with Song
and then write tests for them?

Testing for vote: custom validation that voter isn't votee

Testing for artist: rewrite #score and #recent_score? and write tests for them

Testing for comment: same as album/artist plus a json test like in song

Testing for note: score, recent_score, as_json


Testing for user:

Add description fields to artists, songs, albums? Update seeds etc. Probably
can't do that for songs with the current implementation of notes, though. Could
just give notes a z-index, though, right?
Maybe kaminari? Extra padding on left for things?
ADD EXPLANATIONS FOR SCORE NUMBERS EVERYWHERE. SPECIFY WHEN RECENT_SCORE CALLED.
MAYBE "SCORE TODAY" OR SOMETHING.
Should all these scores and recent scores get prefixed with + ? YES.
http://stackoverflow.com/questions/2389370/convert-an-integer-into-a-signed-string-in-ruby
for signed int printing. fprintf! woop



